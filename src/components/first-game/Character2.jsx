/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Dewa Martika (https://sketchfab.com/DewaMartika)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/putu-sad-ripu-6fcab59bc61a4c7889a1ceb88e24f438
Title: Putu - Sad Ripu
*/

import React, { useState, useRef, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { Html } from '@react-three/drei'

export default function Character(props) {

  const [inputBoxVisible, setInputBoxVisible] = useState(false);
  const [inputFocused, setInputFocused] = useState(false);

  const characterBody = useRef()
  const timeoutRef = useRef(null);
  const inputRef = useRef(null);
  console.log(timeoutRef);

  useEffect(() => {
    if (!inputFocused) {
      timeoutRef.current = setTimeout(() => {
        setInputBoxVisible(false);
      }, 1000); // 1 seconds delay
    } else {
      clearTimeout(timeoutRef.current);
    }

    return () => {
      clearTimeout(timeoutRef.current); // Clean up the timeout on component unmount or state change
    };
  }, [inputFocused]); // Run this effect whenever inputFocused changes

  const handleNumberHover = () => {
    setInputBoxVisible(true);
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }
  };

  const handleNumberLeave = () => {
    timeoutRef.current = setTimeout(() => {
      if (!inputFocused) {
        setInputBoxVisible(false);
      }
    }, 1000); // 1 seconds delay
  };

  const handleNumberClick = () => {
    setInputBoxVisible(true);
    inputRef.current.focus();
  };

  const handleInputFocus = () => {
    setInputFocused(true);
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }
  };

  const handleInputBlur = () => {
    setInputFocused(false);
  };

  const { nodes, materials } = useGLTF('./models/character/boy.glb')
  return (
    <group ref={ characterBody } {...props} dispose={null}>

      {/* Number with INPUT */}
      <Html
          position={ [ 0.85, 7.7, 1.1 ] }
          wrapperClass="label"
          distanceFactor={ 1.2 }
          occlude={ [characterBody] }
      >
        <div className="number" onMouseEnter={ handleNumberHover } onMouseLeave={ handleNumberLeave } onClick={ handleNumberClick }>
        1
        </div>
        <div className={`input-box ${inputBoxVisible ? 'visible' : ''}`}>
          <input ref={ inputRef } type="text" onFocus={ handleInputFocus } onBlur={ handleInputBlur } />
        </div>
      </Html>

      <group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh
          castShadow
          geometry={nodes.Object_2.geometry}
          material={materials.BajuSDlambert1SG}
        />
        <mesh
          castShadow
          geometry={nodes.Object_3.geometry}
          material={materials.BaseIbu_Pitunglambert2SG}
        />
        <mesh
          castShadow
          geometry={nodes.Object_4.geometry}
          material={materials.Texture_Pitung1MerahBajuSG}
        />
        <mesh
          castShadow
          geometry={nodes.Object_5.geometry}
          material={materials.Tielambert1SG}
        />
        <mesh
          castShadow
          geometry={nodes.Object_6.geometry}
          material={materials.Gedelambert3SG}
        />
        <mesh
          castShadow
          geometry={nodes.Object_7.geometry}
          material={materials.lambert6SG}
        />
        <mesh
          castShadow
          geometry={nodes.Object_8.geometry}
          material={materials.lambert9SG}
        />
        <mesh
          castShadow
          geometry={nodes.Object_9.geometry}
          material={materials.BaseIbu_Pitunglambert2SG}
        />
        <mesh
          castShadow
          geometry={nodes.Object_10.geometry}
          material={materials.lambert5SG}
        />
        <mesh
          castShadow
          geometry={nodes.Object_11.geometry}
          material={materials.lambert6SG}
        />
        <mesh
          castShadow
          geometry={nodes.Object_12.geometry}
          material={materials.lambert7SG}
        />
        
      </group>
    </group>
  )
}

useGLTF.preload('./models/character/boy.glb')